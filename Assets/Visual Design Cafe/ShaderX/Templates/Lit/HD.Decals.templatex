{% if unity.version.major >= 2021 %}
    {% assign hdrp_path = "Packages/com.unity.render-pipelines.high-definition/Runtime" %}
    #include "{{hdrp_path}}/Material/Decal/DecalUtilities.hlsl"
    #include "{{hdrp_path}}/Material/Lit/LitDecalData.hlsl"

    Properties
    {
        [ToggleUI] _Decals("Support Decals", Float) = 1.0
    }

    // Per-material keyword to disable decals. Is set in the LitMaterial
    // class when validating the material, based on the _Decals property.
    #pragma shader_feature_local_fragment _DISABLE_DECALS

    // Project (global) keywords to set the decal quality or disable decals completely.
    {% if pass.name == "ShadowCaster" %}
        // Shadows don't need decals.
    {% elseif pass.name == "DepthOnly" %}
        #pragma multi_compile _ WRITE_DECAL_BUFFER
    {% elseif pass.name == "SceneSelectionPass" %}
        // Scene selection does not need decals.
    {% elseif pass.name == "GBuffer" %}
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
    {% elseif pass.name == "Forward" %}
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
    {% elseif pass.name == "Meta" %}
        // Meta is not affected by decals.
    {% elseif pass.name == "MotionVectors" %}
        #pragma multi_compile _ WRITE_DECAL_BUFFER
    {% endif %}

    // Apply the decals in the scene to the HD surface data. Should be applied
    // before calculating the worldspace normals for the surface.
    void ApplyDecalsToSurface_Gradient(
        FragInputs fragInputs, 
        PositionInputs posInput,
        inout SurfaceData surfaceData,
        float alpha,
        float3 normalTS )
    {
        #if HAVE_DECALS && (defined(DECAL_SURFACE_GRADIENT) && defined(SURFACE_GRADIENT))
            if (_EnableDecals)
            {
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData, normalTS);
            }
        #endif
    }

    // Apply the decals in the scene to the HD surface data. Should be applied
    // after calculating the worldspace normals for the surface.
    void ApplyDecalsToSurface(
        FragInputs fragInputs, 
        PositionInputs posInput,
        inout SurfaceData surfaceData,
        float alpha )
    {
        #if HAVE_DECALS && (!defined(DECAL_SURFACE_GRADIENT) || !defined(SURFACE_GRADIENT))
            if (_EnableDecals)
            {
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
            }
        #endif
    }

    #if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
        void EncodeDecalPrepass( SurfaceData surfaceData, inout float4 outDecalBuffer )
        {
            DecalPrepassData decalPrepassData;
            // We don't have the right to access SurfaceData in a shaderpass.
            // However it would be painful to have to add a function like ConvertSurfaceDataToDecalPrepassData() to every Material to return geomNormalWS anyway
            // Here we will put the constrain that any Material requiring to support Decal, will need to have geomNormalWS as member of surfaceData (and we already require normalWS anyway)
            decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
            decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
            EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
        }
    #endif
{% endif %}